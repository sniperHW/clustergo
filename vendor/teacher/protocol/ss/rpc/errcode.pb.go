// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ss/proto/rpc/errcode.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_OK                                 ErrCode = 0
	ErrCode_Error                              ErrCode = 1
	ErrCode_Retry                              ErrCode = 2
	ErrCode_GateLogin_Redirect                 ErrCode = 10
	ErrCode_Forward_UserNotFound               ErrCode = 20
	ErrCode_Forward_InvalidGateUser            ErrCode = 21
	ErrCode_Forward_InvalidSeqNo               ErrCode = 22
	ErrCode_ConflictZone_PlayerAlreadyHasGroup ErrCode = 30
	ErrCode_ConflictZone_PlayerHasWrongPhase   ErrCode = 31
	ErrCode_ConflictZone_PlayerHasWrongDan     ErrCode = 32
	ErrCode_ConflictZone_PlayerHasWrongResult  ErrCode = 33
)

var ErrCode_name = map[int32]string{
	0:  "OK",
	1:  "Error",
	2:  "Retry",
	10: "GateLogin_Redirect",
	20: "Forward_UserNotFound",
	21: "Forward_InvalidGateUser",
	22: "Forward_InvalidSeqNo",
	30: "ConflictZone_PlayerAlreadyHasGroup",
	31: "ConflictZone_PlayerHasWrongPhase",
	32: "ConflictZone_PlayerHasWrongDan",
	33: "ConflictZone_PlayerHasWrongResult",
}

var ErrCode_value = map[string]int32{
	"OK":                                 0,
	"Error":                              1,
	"Retry":                              2,
	"GateLogin_Redirect":                 10,
	"Forward_UserNotFound":               20,
	"Forward_InvalidGateUser":            21,
	"Forward_InvalidSeqNo":               22,
	"ConflictZone_PlayerAlreadyHasGroup": 30,
	"ConflictZone_PlayerHasWrongPhase":   31,
	"ConflictZone_PlayerHasWrongDan":     32,
	"ConflictZone_PlayerHasWrongResult":  33,
}

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (x *ErrCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrCode_value, data, "ErrCode")
	if err != nil {
		return err
	}
	*x = ErrCode(value)
	return nil
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f5e33aab7bfe2c06, []int{0}
}

func init() {
	proto.RegisterEnum("rpc.ErrCode", ErrCode_name, ErrCode_value)
}

func init() { proto.RegisterFile("ss/proto/rpc/errcode.proto", fileDescriptor_f5e33aab7bfe2c06) }

var fileDescriptor_f5e33aab7bfe2c06 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd0, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x07, 0x70, 0x8d, 0xa8, 0x38, 0xa7, 0x65, 0xa8, 0xad, 0x1f, 0x50, 0xdb, 0xa2, 0x1e, 0x3c,
	0x98, 0x67, 0xd0, 0xda, 0x0f, 0x51, 0x6a, 0x89, 0x88, 0xd0, 0x4b, 0x58, 0x76, 0xc7, 0x36, 0xb0,
	0xec, 0xc4, 0xd9, 0x8d, 0x92, 0x47, 0xf2, 0x2d, 0x25, 0x7e, 0x80, 0x07, 0xe9, 0x6d, 0x98, 0xff,
	0x6f, 0xe6, 0xf0, 0x87, 0xa3, 0x10, 0xd2, 0x52, 0x38, 0x72, 0x2a, 0xa5, 0x49, 0x49, 0xc4, 0xb0,
	0xa5, 0xcb, 0xaf, 0x0d, 0x6e, 0x49, 0x69, 0x2e, 0x3e, 0x12, 0xd8, 0x1d, 0x89, 0x0c, 0xd9, 0x12,
	0xee, 0x40, 0xf2, 0x70, 0xa7, 0x36, 0x70, 0x0f, 0xb6, 0x47, 0x22, 0x2c, 0x6a, 0xb3, 0x19, 0x33,
	0x8a, 0x52, 0xab, 0x04, 0xdb, 0x80, 0x13, 0x1d, 0xe9, 0x9e, 0x97, 0x85, 0xcf, 0x33, 0xb2, 0x85,
	0x90, 0x89, 0x0a, 0xf0, 0x00, 0x5a, 0x63, 0x96, 0x77, 0x2d, 0x36, 0x7f, 0x0a, 0x24, 0x33, 0x8e,
	0x63, 0xae, 0xbc, 0x55, 0x2d, 0x3c, 0x86, 0xce, 0x6f, 0x72, 0xeb, 0xdf, 0xb4, 0x2b, 0x6c, 0xf3,
	0xa0, 0x41, 0x6a, 0xff, 0xef, 0xd9, 0x4f, 0xf8, 0x48, 0xaf, 0x33, 0x56, 0x6d, 0x3c, 0x87, 0xc1,
	0x90, 0xfd, 0x8b, 0x2b, 0x4c, 0x5c, 0xb0, 0xa7, 0x7c, 0xee, 0x74, 0x4d, 0x72, 0xe5, 0x84, 0xb4,
	0xad, 0xa7, 0x3a, 0x4c, 0x84, 0xab, 0x52, 0x75, 0xf1, 0x14, 0x7a, 0xff, 0xb8, 0xa9, 0x0e, 0xcf,
	0xc2, 0x7e, 0x39, 0x5f, 0xe9, 0x40, 0xea, 0x04, 0x07, 0xd0, 0x5d, 0xa3, 0x6e, 0xb4, 0x57, 0x3d,
	0x3c, 0x83, 0xfe, 0x1a, 0x93, 0x51, 0xa8, 0x5c, 0x54, 0xfd, 0xeb, 0xc3, 0x45, 0x27, 0x92, 0x36,
	0x2b, 0x92, 0xef, 0x4e, 0x0d, 0xbb, 0x34, 0x84, 0xa6, 0xd9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1c, 0x5d, 0x34, 0x58, 0x68, 0x01, 0x00, 0x00,
}
