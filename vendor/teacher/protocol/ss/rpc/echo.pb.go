// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ss/proto/rpc/echo.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoReq struct {
	Message              *string  `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Seqno                *int64   `protobuf:"varint,2,opt,name=seqno" json:"seqno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoReq) Reset()         { *m = EchoReq{} }
func (m *EchoReq) String() string { return proto.CompactTextString(m) }
func (*EchoReq) ProtoMessage()    {}
func (*EchoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fb42eab7d16bfd8, []int{0}
}

func (m *EchoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoReq.Unmarshal(m, b)
}
func (m *EchoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoReq.Marshal(b, m, deterministic)
}
func (m *EchoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReq.Merge(m, src)
}
func (m *EchoReq) XXX_Size() int {
	return xxx_messageInfo_EchoReq.Size(m)
}
func (m *EchoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReq.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReq proto.InternalMessageInfo

func (m *EchoReq) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *EchoReq) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

type EchoResp struct {
	Message              *string  `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Seqno                *int64   `protobuf:"varint,2,opt,name=seqno" json:"seqno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResp) Reset()         { *m = EchoResp{} }
func (m *EchoResp) String() string { return proto.CompactTextString(m) }
func (*EchoResp) ProtoMessage()    {}
func (*EchoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fb42eab7d16bfd8, []int{1}
}

func (m *EchoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResp.Unmarshal(m, b)
}
func (m *EchoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResp.Marshal(b, m, deterministic)
}
func (m *EchoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResp.Merge(m, src)
}
func (m *EchoResp) XXX_Size() int {
	return xxx_messageInfo_EchoResp.Size(m)
}
func (m *EchoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResp.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResp proto.InternalMessageInfo

func (m *EchoResp) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *EchoResp) GetSeqno() int64 {
	if m != nil && m.Seqno != nil {
		return *m.Seqno
	}
	return 0
}

func init() {
	proto.RegisterType((*EchoReq)(nil), "rpc.echo_req")
	proto.RegisterType((*EchoResp)(nil), "rpc.echo_resp")
}

func init() { proto.RegisterFile("ss/proto/rpc/echo.proto", fileDescriptor_8fb42eab7d16bfd8) }

var fileDescriptor_8fb42eab7d16bfd8 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2e, 0xd6, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0x4d, 0xce, 0xc8, 0xd7, 0x03, 0x73,
	0x85, 0x98, 0x8b, 0x0a, 0x92, 0x95, 0xac, 0xb8, 0x38, 0x40, 0x42, 0xf1, 0x45, 0xa9, 0x85, 0x42,
	0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x4c, 0x1a, 0x9c,
	0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x71, 0x6a, 0x61, 0x5e, 0xbe, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x73, 0x10, 0x84, 0xa3, 0x64, 0xcd, 0xc5, 0x09, 0xd5, 0x5b, 0x5c, 0x40, 0xaa, 0x66, 0x27,
	0xc9, 0x28, 0xf1, 0x92, 0xd4, 0xc4, 0xe4, 0x8c, 0xd4, 0x22, 0x88, 0xeb, 0x92, 0xf3, 0x73, 0xf4,
	0x8b, 0x8b, 0x41, 0x6e, 0x04, 0x04, 0x00, 0x00, 0xff, 0xff, 0x51, 0x2d, 0xbb, 0xdd, 0xb2, 0x00,
	0x00, 0x00,
}
