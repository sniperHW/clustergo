// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs/proto/message/equipGroupAddNx.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EquipGroupAddNxToS struct {
	GroupName            *string  `protobuf:"bytes,1,req,name=groupName" json:"groupName,omitempty"`
	GroupID              *int32   `protobuf:"varint,2,req,name=groupID" json:"groupID,omitempty"`
	EquipIDs             []uint32 `protobuf:"varint,3,rep,name=equipIDs" json:"equipIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EquipGroupAddNxToS) Reset()         { *m = EquipGroupAddNxToS{} }
func (m *EquipGroupAddNxToS) String() string { return proto.CompactTextString(m) }
func (*EquipGroupAddNxToS) ProtoMessage()    {}
func (*EquipGroupAddNxToS) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d10f7a033b86324, []int{0}
}

func (m *EquipGroupAddNxToS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipGroupAddNxToS.Unmarshal(m, b)
}
func (m *EquipGroupAddNxToS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipGroupAddNxToS.Marshal(b, m, deterministic)
}
func (m *EquipGroupAddNxToS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipGroupAddNxToS.Merge(m, src)
}
func (m *EquipGroupAddNxToS) XXX_Size() int {
	return xxx_messageInfo_EquipGroupAddNxToS.Size(m)
}
func (m *EquipGroupAddNxToS) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipGroupAddNxToS.DiscardUnknown(m)
}

var xxx_messageInfo_EquipGroupAddNxToS proto.InternalMessageInfo

func (m *EquipGroupAddNxToS) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *EquipGroupAddNxToS) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *EquipGroupAddNxToS) GetEquipIDs() []uint32 {
	if m != nil {
		return m.EquipIDs
	}
	return nil
}

type EquipGroupAddNxToC struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EquipGroupAddNxToC) Reset()         { *m = EquipGroupAddNxToC{} }
func (m *EquipGroupAddNxToC) String() string { return proto.CompactTextString(m) }
func (*EquipGroupAddNxToC) ProtoMessage()    {}
func (*EquipGroupAddNxToC) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d10f7a033b86324, []int{1}
}

func (m *EquipGroupAddNxToC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipGroupAddNxToC.Unmarshal(m, b)
}
func (m *EquipGroupAddNxToC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipGroupAddNxToC.Marshal(b, m, deterministic)
}
func (m *EquipGroupAddNxToC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipGroupAddNxToC.Merge(m, src)
}
func (m *EquipGroupAddNxToC) XXX_Size() int {
	return xxx_messageInfo_EquipGroupAddNxToC.Size(m)
}
func (m *EquipGroupAddNxToC) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipGroupAddNxToC.DiscardUnknown(m)
}

var xxx_messageInfo_EquipGroupAddNxToC proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EquipGroupAddNxToS)(nil), "message.equipGroupAddNx_toS")
	proto.RegisterType((*EquipGroupAddNxToC)(nil), "message.equipGroupAddNx_toC")
}

func init() {
	proto.RegisterFile("cs/proto/message/equipGroupAddNx.proto", fileDescriptor_7d10f7a033b86324)
}

var fileDescriptor_7d10f7a033b86324 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0x2e, 0xd6, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x4f, 0x2d, 0x2c,
	0xcd, 0x2c, 0x70, 0x2f, 0xca, 0x2f, 0x2d, 0x70, 0x4c, 0x49, 0xf1, 0xab, 0xd0, 0x03, 0xcb, 0x0a,
	0xb1, 0x43, 0xa5, 0x95, 0x32, 0xb9, 0x84, 0xd1, 0x54, 0xc4, 0x97, 0xe4, 0x07, 0x0b, 0xc9, 0x70,
	0x71, 0xa6, 0x83, 0x44, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x98, 0x34, 0x38, 0x83, 0x10,
	0x02, 0x42, 0x12, 0x5c, 0xec, 0x60, 0x8e, 0xa7, 0x8b, 0x04, 0x93, 0x02, 0x93, 0x06, 0x6b, 0x10,
	0x8c, 0x2b, 0x24, 0xc5, 0xc5, 0x01, 0x36, 0xce, 0xd3, 0xa5, 0x58, 0x82, 0x59, 0x81, 0x59, 0x83,
	0x37, 0x08, 0xce, 0x57, 0x12, 0xc5, 0x66, 0x95, 0xb3, 0x93, 0x6c, 0x94, 0x74, 0x49, 0x6a, 0x62,
	0x72, 0x46, 0x6a, 0x11, 0xc4, 0xe5, 0xc9, 0xf9, 0x39, 0xfa, 0xc9, 0xc5, 0x30, 0xf7, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xca, 0x75, 0x28, 0xfb, 0xd2, 0x00, 0x00, 0x00,
}
