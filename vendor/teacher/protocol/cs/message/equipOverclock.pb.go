// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs/proto/message/equipOverclock.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EquipOverclockToS struct {
	EquipID              *uint32  `protobuf:"varint,1,opt,name=equipID" json:"equipID,omitempty"`
	Order                *int32   `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EquipOverclockToS) Reset()         { *m = EquipOverclockToS{} }
func (m *EquipOverclockToS) String() string { return proto.CompactTextString(m) }
func (*EquipOverclockToS) ProtoMessage()    {}
func (*EquipOverclockToS) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7de5b5b25217410, []int{0}
}

func (m *EquipOverclockToS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipOverclockToS.Unmarshal(m, b)
}
func (m *EquipOverclockToS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipOverclockToS.Marshal(b, m, deterministic)
}
func (m *EquipOverclockToS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipOverclockToS.Merge(m, src)
}
func (m *EquipOverclockToS) XXX_Size() int {
	return xxx_messageInfo_EquipOverclockToS.Size(m)
}
func (m *EquipOverclockToS) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipOverclockToS.DiscardUnknown(m)
}

var xxx_messageInfo_EquipOverclockToS proto.InternalMessageInfo

func (m *EquipOverclockToS) GetEquipID() uint32 {
	if m != nil && m.EquipID != nil {
		return *m.EquipID
	}
	return 0
}

func (m *EquipOverclockToS) GetOrder() int32 {
	if m != nil && m.Order != nil {
		return *m.Order
	}
	return 0
}

type EquipOverclockToC struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EquipOverclockToC) Reset()         { *m = EquipOverclockToC{} }
func (m *EquipOverclockToC) String() string { return proto.CompactTextString(m) }
func (*EquipOverclockToC) ProtoMessage()    {}
func (*EquipOverclockToC) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7de5b5b25217410, []int{1}
}

func (m *EquipOverclockToC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EquipOverclockToC.Unmarshal(m, b)
}
func (m *EquipOverclockToC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EquipOverclockToC.Marshal(b, m, deterministic)
}
func (m *EquipOverclockToC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipOverclockToC.Merge(m, src)
}
func (m *EquipOverclockToC) XXX_Size() int {
	return xxx_messageInfo_EquipOverclockToC.Size(m)
}
func (m *EquipOverclockToC) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipOverclockToC.DiscardUnknown(m)
}

var xxx_messageInfo_EquipOverclockToC proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EquipOverclockToS)(nil), "message.equipOverclock_toS")
	proto.RegisterType((*EquipOverclockToC)(nil), "message.equipOverclock_toC")
}

func init() {
	proto.RegisterFile("cs/proto/message/equipOverclock.proto", fileDescriptor_e7de5b5b25217410)
}

var fileDescriptor_e7de5b5b25217410 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0x2e, 0xd6, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x4f, 0x2d, 0x2c,
	0xcd, 0x2c, 0xf0, 0x2f, 0x4b, 0x2d, 0x4a, 0xce, 0xc9, 0x4f, 0xce, 0xd6, 0x03, 0x4b, 0x0a, 0xb1,
	0x43, 0x65, 0x95, 0x5c, 0xb8, 0x84, 0x50, 0x15, 0xc4, 0x97, 0xe4, 0x07, 0x0b, 0x49, 0x70, 0xb1,
	0x83, 0x45, 0x3d, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x60, 0x5c, 0x21, 0x11, 0x2e,
	0xd6, 0xfc, 0xa2, 0x94, 0xd4, 0x22, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x08, 0x47, 0x49,
	0x04, 0x8b, 0x29, 0xce, 0x4e, 0xb2, 0x51, 0xd2, 0x25, 0xa9, 0x89, 0xc9, 0x19, 0xa9, 0x45, 0x10,
	0x27, 0x25, 0xe7, 0xe7, 0xe8, 0x27, 0x17, 0xc3, 0x1c, 0x06, 0x08, 0x00, 0x00, 0xff, 0xff, 0x92,
	0x2c, 0xd4, 0xcf, 0xab, 0x00, 0x00, 0x00,
}
