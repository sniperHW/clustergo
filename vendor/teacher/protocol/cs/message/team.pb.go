// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs/proto/message/team.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeamStatus int32

const (
	TeamStatus_Unknown       TeamStatus = 0
	TeamStatus_Standby       TeamStatus = 1
	TeamStatus_Battle_Verify TeamStatus = 2
	TeamStatus_Battle_vote   TeamStatus = 3
	TeamStatus_Battle        TeamStatus = 4
)

var TeamStatus_name = map[int32]string{
	0: "Unknown",
	1: "Standby",
	2: "Battle_Verify",
	3: "Battle_vote",
	4: "Battle",
}

var TeamStatus_value = map[string]int32{
	"Unknown":       0,
	"Standby":       1,
	"Battle_Verify": 2,
	"Battle_vote":   3,
	"Battle":        4,
}

func (x TeamStatus) Enum() *TeamStatus {
	p := new(TeamStatus)
	*p = x
	return p
}

func (x TeamStatus) String() string {
	return proto.EnumName(TeamStatus_name, int32(x))
}

func (x *TeamStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TeamStatus_value, data, "TeamStatus")
	if err != nil {
		return err
	}
	*x = TeamStatus(value)
	return nil
}

func (TeamStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_310eecdd299f0a1d, []int{0}
}

type Team struct {
	TeamID               *uint32       `protobuf:"varint,1,req,name=TeamID" json:"TeamID,omitempty"`
	TeamName             *string       `protobuf:"bytes,2,req,name=TeamName" json:"TeamName,omitempty"`
	Status               *TeamStatus   `protobuf:"varint,3,req,name=status,enum=message.TeamStatus" json:"status,omitempty"`
	Header               *uint64       `protobuf:"varint,4,req,name=Header" json:"Header,omitempty"`
	Players              []*TeamPlayer `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	Target               *TeamTarget   `protobuf:"bytes,6,opt,name=target" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_310eecdd299f0a1d, []int{0}
}

func (m *Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Team.Unmarshal(m, b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Team.Marshal(b, m, deterministic)
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return xxx_messageInfo_Team.Size(m)
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetTeamID() uint32 {
	if m != nil && m.TeamID != nil {
		return *m.TeamID
	}
	return 0
}

func (m *Team) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *Team) GetStatus() TeamStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TeamStatus_Unknown
}

func (m *Team) GetHeader() uint64 {
	if m != nil && m.Header != nil {
		return *m.Header
	}
	return 0
}

func (m *Team) GetPlayers() []*TeamPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Team) GetTarget() *TeamTarget {
	if m != nil {
		return m.Target
	}
	return nil
}

type TeamPlayer struct {
	UserID               *string  `protobuf:"bytes,1,req,name=userID" json:"userID,omitempty"`
	PlayerID             *uint64  `protobuf:"varint,2,req,name=playerID" json:"playerID,omitempty"`
	CharacterID          *int32   `protobuf:"varint,3,req,name=characterID" json:"characterID,omitempty"`
	PLevel               *int32   `protobuf:"varint,4,req,name=pLevel" json:"pLevel,omitempty"`
	CombatPower          *int32   `protobuf:"varint,5,req,name=combatPower" json:"combatPower,omitempty"`
	Name                 *string  `protobuf:"bytes,6,req,name=name" json:"name,omitempty"`
	Portrait             *int32   `protobuf:"varint,7,req,name=portrait" json:"portrait,omitempty"`
	OnLine               *bool    `protobuf:"varint,8,req,name=onLine" json:"onLine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamPlayer) Reset()         { *m = TeamPlayer{} }
func (m *TeamPlayer) String() string { return proto.CompactTextString(m) }
func (*TeamPlayer) ProtoMessage()    {}
func (*TeamPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_310eecdd299f0a1d, []int{1}
}

func (m *TeamPlayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamPlayer.Unmarshal(m, b)
}
func (m *TeamPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamPlayer.Marshal(b, m, deterministic)
}
func (m *TeamPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamPlayer.Merge(m, src)
}
func (m *TeamPlayer) XXX_Size() int {
	return xxx_messageInfo_TeamPlayer.Size(m)
}
func (m *TeamPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_TeamPlayer proto.InternalMessageInfo

func (m *TeamPlayer) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *TeamPlayer) GetPlayerID() uint64 {
	if m != nil && m.PlayerID != nil {
		return *m.PlayerID
	}
	return 0
}

func (m *TeamPlayer) GetCharacterID() int32 {
	if m != nil && m.CharacterID != nil {
		return *m.CharacterID
	}
	return 0
}

func (m *TeamPlayer) GetPLevel() int32 {
	if m != nil && m.PLevel != nil {
		return *m.PLevel
	}
	return 0
}

func (m *TeamPlayer) GetCombatPower() int32 {
	if m != nil && m.CombatPower != nil {
		return *m.CombatPower
	}
	return 0
}

func (m *TeamPlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamPlayer) GetPortrait() int32 {
	if m != nil && m.Portrait != nil {
		return *m.Portrait
	}
	return 0
}

func (m *TeamPlayer) GetOnLine() bool {
	if m != nil && m.OnLine != nil {
		return *m.OnLine
	}
	return false
}

type TeamTarget struct {
	LevelID              *int32   `protobuf:"varint,1,req,name=levelID" json:"levelID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamTarget) Reset()         { *m = TeamTarget{} }
func (m *TeamTarget) String() string { return proto.CompactTextString(m) }
func (*TeamTarget) ProtoMessage()    {}
func (*TeamTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_310eecdd299f0a1d, []int{2}
}

func (m *TeamTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamTarget.Unmarshal(m, b)
}
func (m *TeamTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamTarget.Marshal(b, m, deterministic)
}
func (m *TeamTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamTarget.Merge(m, src)
}
func (m *TeamTarget) XXX_Size() int {
	return xxx_messageInfo_TeamTarget.Size(m)
}
func (m *TeamTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamTarget.DiscardUnknown(m)
}

var xxx_messageInfo_TeamTarget proto.InternalMessageInfo

func (m *TeamTarget) GetLevelID() int32 {
	if m != nil && m.LevelID != nil {
		return *m.LevelID
	}
	return 0
}

func init() {
	proto.RegisterEnum("message.TeamStatus", TeamStatus_name, TeamStatus_value)
	proto.RegisterType((*Team)(nil), "message.Team")
	proto.RegisterType((*TeamPlayer)(nil), "message.TeamPlayer")
	proto.RegisterType((*TeamTarget)(nil), "message.TeamTarget")
}

func init() { proto.RegisterFile("cs/proto/message/team.proto", fileDescriptor_310eecdd299f0a1d) }

var fileDescriptor_310eecdd299f0a1d = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x5f, 0xef, 0xd2, 0x30,
	0x14, 0x75, 0x63, 0x7f, 0xf8, 0xdd, 0x05, 0x9d, 0x35, 0x31, 0x8d, 0xc4, 0xa4, 0xe1, 0xc1, 0x2c,
	0x1a, 0x59, 0xe2, 0x47, 0x20, 0x3c, 0x48, 0x42, 0x0c, 0x29, 0xc8, 0x83, 0x2f, 0xa6, 0x8c, 0x2b,
	0x10, 0xb7, 0x95, 0xb4, 0x05, 0xc2, 0x67, 0xf5, 0xd5, 0x0f, 0x62, 0xda, 0x15, 0x30, 0xfa, 0xb4,
	0x9e, 0x73, 0xcf, 0x3d, 0xf7, 0x9e, 0xb5, 0x30, 0xac, 0x74, 0x79, 0x54, 0xd2, 0xc8, 0xb2, 0x41,
	0xad, 0xc5, 0x0e, 0x4b, 0x83, 0xa2, 0x19, 0x3b, 0x8a, 0xa4, 0x9e, 0x1b, 0xfd, 0x0a, 0x20, 0x5a,
	0xa1, 0x68, 0xc8, 0x6b, 0x48, 0xec, 0x77, 0x36, 0xa5, 0x01, 0x0b, 0x8b, 0x01, 0xf7, 0x88, 0xbc,
	0x81, 0xbe, 0x3d, 0x7d, 0x11, 0x0d, 0xd2, 0x90, 0x85, 0xc5, 0x13, 0xbf, 0x63, 0xf2, 0x01, 0x12,
	0x6d, 0x84, 0x39, 0x69, 0xda, 0x63, 0x61, 0xf1, 0xfc, 0xd3, 0xab, 0xb1, 0xb7, 0x1d, 0x5b, 0xc9,
	0xd2, 0x95, 0xb8, 0x97, 0xd8, 0x01, 0x9f, 0x51, 0x6c, 0x51, 0xd1, 0x88, 0x85, 0x45, 0xc4, 0x3d,
	0x22, 0x1f, 0x21, 0x3d, 0xd6, 0xe2, 0x8a, 0x4a, 0xd3, 0x98, 0xf5, 0x8a, 0xec, 0x1f, 0x97, 0x85,
	0xab, 0xf1, 0x9b, 0xc6, 0xce, 0x34, 0x42, 0xed, 0xd0, 0xd0, 0x84, 0x05, 0xff, 0xa9, 0x57, 0xae,
	0xc4, 0xbd, 0x64, 0xf4, 0x3b, 0x00, 0x78, 0x98, 0xd8, 0x15, 0x4e, 0x1a, 0x95, 0xcf, 0xf8, 0xc4,
	0x3d, 0xb2, 0x19, 0x3b, 0xfb, 0xd9, 0xd4, 0x65, 0x8c, 0xf8, 0x1d, 0x13, 0x06, 0x59, 0xb5, 0x17,
	0x4a, 0x54, 0xc6, 0x95, 0x6d, 0xd0, 0x98, 0xff, 0x4d, 0x59, 0xd7, 0xe3, 0x1c, 0xcf, 0x58, 0xbb,
	0x60, 0x31, 0xf7, 0xc8, 0x75, 0xca, 0x66, 0x23, 0xcc, 0x42, 0x5e, 0x50, 0xd1, 0xd8, 0x77, 0x3e,
	0x28, 0x42, 0x20, 0x6a, 0xed, 0x7f, 0x4d, 0xdc, 0x36, 0xee, 0xec, 0x76, 0x91, 0xca, 0x28, 0x71,
	0x30, 0x34, 0x75, 0x2d, 0x77, 0x6c, 0x27, 0xc9, 0x76, 0x7e, 0x68, 0x91, 0xf6, 0x59, 0x58, 0xf4,
	0xb9, 0x47, 0xa3, 0x77, 0x5d, 0xca, 0x2e, 0x3c, 0xa1, 0x90, 0xd6, 0x76, 0x01, 0x1f, 0x33, 0xe6,
	0x37, 0xf8, 0x7e, 0xdd, 0xe9, 0xba, 0x8b, 0x21, 0x19, 0xa4, 0x5f, 0xdb, 0x9f, 0xad, 0xbc, 0xb4,
	0xf9, 0x33, 0x0b, 0x96, 0x46, 0xb4, 0xdb, 0xcd, 0x35, 0x0f, 0xc8, 0x4b, 0x18, 0x4c, 0x84, 0x31,
	0x35, 0x7e, 0x5f, 0xa3, 0x3a, 0xfc, 0xb8, 0xe6, 0x21, 0x79, 0x01, 0x99, 0xa7, 0xce, 0xd2, 0x60,
	0xde, 0x23, 0x00, 0x49, 0x47, 0xe4, 0xd1, 0xe4, 0xed, 0xb7, 0xa1, 0x41, 0x51, 0xed, 0x51, 0x75,
	0x2f, 0xae, 0x92, 0x75, 0x59, 0xe9, 0xdb, 0xbb, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xb4,
	0x71, 0xf6, 0x8a, 0x02, 0x00, 0x00,
}
