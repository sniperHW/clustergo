// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cs/proto/message/backpackUse.proto

package message

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BackpackUseToS struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count                *int32   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackpackUseToS) Reset()         { *m = BackpackUseToS{} }
func (m *BackpackUseToS) String() string { return proto.CompactTextString(m) }
func (*BackpackUseToS) ProtoMessage()    {}
func (*BackpackUseToS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3babd9ff2993d044, []int{0}
}

func (m *BackpackUseToS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackpackUseToS.Unmarshal(m, b)
}
func (m *BackpackUseToS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackpackUseToS.Marshal(b, m, deterministic)
}
func (m *BackpackUseToS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackpackUseToS.Merge(m, src)
}
func (m *BackpackUseToS) XXX_Size() int {
	return xxx_messageInfo_BackpackUseToS.Size(m)
}
func (m *BackpackUseToS) XXX_DiscardUnknown() {
	xxx_messageInfo_BackpackUseToS.DiscardUnknown(m)
}

var xxx_messageInfo_BackpackUseToS proto.InternalMessageInfo

func (m *BackpackUseToS) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BackpackUseToS) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type BackpackUseToC struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackpackUseToC) Reset()         { *m = BackpackUseToC{} }
func (m *BackpackUseToC) String() string { return proto.CompactTextString(m) }
func (*BackpackUseToC) ProtoMessage()    {}
func (*BackpackUseToC) Descriptor() ([]byte, []int) {
	return fileDescriptor_3babd9ff2993d044, []int{1}
}

func (m *BackpackUseToC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackpackUseToC.Unmarshal(m, b)
}
func (m *BackpackUseToC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackpackUseToC.Marshal(b, m, deterministic)
}
func (m *BackpackUseToC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackpackUseToC.Merge(m, src)
}
func (m *BackpackUseToC) XXX_Size() int {
	return xxx_messageInfo_BackpackUseToC.Size(m)
}
func (m *BackpackUseToC) XXX_DiscardUnknown() {
	xxx_messageInfo_BackpackUseToC.DiscardUnknown(m)
}

var xxx_messageInfo_BackpackUseToC proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BackpackUseToS)(nil), "message.backpackUse_toS")
	proto.RegisterType((*BackpackUseToC)(nil), "message.backpackUse_toC")
}

func init() { proto.RegisterFile("cs/proto/message/backpackUse.proto", fileDescriptor_3babd9ff2993d044) }

var fileDescriptor_3babd9ff2993d044 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x2e, 0xd6, 0x2f,
	0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x4f, 0x4a, 0x4c,
	0xce, 0x2e, 0x48, 0x4c, 0xce, 0x0e, 0x2d, 0x4e, 0xd5, 0x03, 0xcb, 0x08, 0xb1, 0x43, 0xa5, 0x94,
	0xcc, 0xb9, 0xf8, 0x91, 0x64, 0xe3, 0x4b, 0xf2, 0x83, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x98, 0x32, 0x53, 0x84, 0x44, 0xb8, 0x58, 0x93, 0xf3, 0x4b,
	0xf3, 0x4a, 0x24, 0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x20, 0x1c, 0x25, 0x41, 0x74, 0x8d, 0xce,
	0x4e, 0xb2, 0x51, 0xd2, 0x25, 0xa9, 0x89, 0xc9, 0x19, 0xa9, 0x45, 0x10, 0xfb, 0x93, 0xf3, 0x73,
	0xf4, 0x93, 0x8b, 0x61, 0xae, 0x00, 0x04, 0x00, 0x00, 0xff, 0xff, 0x05, 0xd5, 0xfd, 0x73, 0x98,
	0x00, 0x00, 0x00,
}
