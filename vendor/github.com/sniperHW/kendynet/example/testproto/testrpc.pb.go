// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testrpc.proto

package testproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RPCRequest struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Method           *string `protobuf:"bytes,2,req,name=method" json:"method,omitempty"`
	Arg              []byte  `protobuf:"bytes,3,opt,name=arg" json:"arg,omitempty"`
	NeedResp         *bool   `protobuf:"varint,4,opt,name=needResp" json:"needResp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RPCRequest) Reset()                    { *m = RPCRequest{} }
func (m *RPCRequest) String() string            { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()               {}
func (*RPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RPCRequest) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *RPCRequest) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return ""
}

func (m *RPCRequest) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *RPCRequest) GetNeedResp() bool {
	if m != nil && m.NeedResp != nil {
		return *m.NeedResp
	}
	return false
}

type RPCResponse struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Err              *string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	Ret              []byte  `protobuf:"bytes,3,opt,name=ret" json:"ret,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RPCResponse) Reset()                    { *m = RPCResponse{} }
func (m *RPCResponse) String() string            { return proto.CompactTextString(m) }
func (*RPCResponse) ProtoMessage()               {}
func (*RPCResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RPCResponse) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *RPCResponse) GetErr() string {
	if m != nil && m.Err != nil {
		return *m.Err
	}
	return ""
}

func (m *RPCResponse) GetRet() []byte {
	if m != nil {
		return m.Ret
	}
	return nil
}

type RPCPing struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Timestamp        *int64  `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RPCPing) Reset()                    { *m = RPCPing{} }
func (m *RPCPing) String() string            { return proto.CompactTextString(m) }
func (*RPCPing) ProtoMessage()               {}
func (*RPCPing) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RPCPing) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *RPCPing) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type RPCPong struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	Timestamp        *int64  `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RPCPong) Reset()                    { *m = RPCPong{} }
func (m *RPCPong) String() string            { return proto.CompactTextString(m) }
func (*RPCPong) ProtoMessage()               {}
func (*RPCPong) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RPCPong) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *RPCPong) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type Hello struct {
	Hello            *string `protobuf:"bytes,1,req,name=hello" json:"hello,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Hello) GetHello() string {
	if m != nil && m.Hello != nil {
		return *m.Hello
	}
	return ""
}

type World struct {
	World            *string `protobuf:"bytes,1,req,name=world" json:"world,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *World) Reset()                    { *m = World{} }
func (m *World) String() string            { return proto.CompactTextString(m) }
func (*World) ProtoMessage()               {}
func (*World) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *World) GetWorld() string {
	if m != nil && m.World != nil {
		return *m.World
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCRequest)(nil), "testproto.RPCRequest")
	proto.RegisterType((*RPCResponse)(nil), "testproto.RPCResponse")
	proto.RegisterType((*RPCPing)(nil), "testproto.RPCPing")
	proto.RegisterType((*RPCPong)(nil), "testproto.RPCPong")
	proto.RegisterType((*Hello)(nil), "testproto.hello")
	proto.RegisterType((*World)(nil), "testproto.world")
}

func init() { proto.RegisterFile("testrpc.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x8e, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x52, 0xb5, 0x3b, 0x2a, 0x94, 0x45, 0x64, 0x11, 0x85, 0x25, 0xa7, 0x3d, 0x79,
	0xf7, 0x9c, 0x17, 0x08, 0xf3, 0x06, 0xc5, 0x0c, 0x6d, 0x21, 0xc9, 0x6e, 0x67, 0x47, 0x7c, 0x7d,
	0x99, 0xb5, 0xd1, 0x4b, 0x4e, 0xbd, 0x7d, 0xdf, 0xfc, 0xf9, 0xf3, 0x2f, 0x3c, 0x0a, 0x65, 0xe1,
	0xf4, 0xf9, 0x9e, 0x38, 0x4a, 0xb4, 0x46, 0xb5, 0x60, 0x3b, 0x00, 0x60, 0xdf, 0x21, 0x9d, 0xbf,
	0x28, 0x8b, 0xdd, 0x41, 0x93, 0xe9, 0xec, 0x2a, 0x5f, 0x87, 0x0d, 0x2a, 0xda, 0x67, 0xb8, 0x9d,
	0x48, 0x8e, 0x71, 0x70, 0xb5, 0xaf, 0x83, 0xc1, 0x8b, 0xe9, 0x97, 0x7b, 0x3e, 0xb8, 0xc6, 0x57,
	0xe1, 0x01, 0x15, 0xed, 0x0b, 0x6c, 0x67, 0xa2, 0x01, 0x29, 0x27, 0xb7, 0xf1, 0x55, 0xd8, 0xe2,
	0x9f, 0xb7, 0x1d, 0xdc, 0x97, 0x95, 0x9c, 0xe2, 0x9c, 0x69, 0x65, 0x66, 0x07, 0x0d, 0x31, 0xbb,
	0xda, 0x57, 0xc1, 0xa0, 0xa2, 0x5e, 0x98, 0x64, 0x19, 0x60, 0x92, 0xf6, 0x03, 0xee, 0xb0, 0xef,
	0xfa, 0xd3, 0x7c, 0x58, 0xf9, 0xc1, 0x2b, 0x18, 0x39, 0x4d, 0x94, 0x65, 0x3f, 0xa5, 0xf2, 0xd4,
	0x06, 0xff, 0x0f, 0x4b, 0x35, 0x5e, 0x51, 0x7d, 0x83, 0x9b, 0x23, 0x8d, 0x63, 0xb4, 0x4f, 0x17,
	0x28, 0x55, 0x83, 0xbf, 0xa2, 0xf1, 0x77, 0xe4, 0x71, 0xd0, 0xb8, 0xc0, 0x12, 0x17, 0xf9, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xa2, 0xf5, 0x3b, 0x12, 0x79, 0x01, 0x00, 0x00,
}
